{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { dataExample } from 'app/helpers/formData';\nimport { CommunitiesService } from 'app/services/communities.service';\nimport { DepartmentService } from 'app/services/department.service';\nimport { MunicipalitiesService } from 'app/services/municipalities.service';\nimport { QuestionService } from 'app/services/question.service';\nlet MonitoringComponent = class MonitoringComponent {\n  deparmentService;\n  municipalitiesService;\n  communitiesService;\n  questionsService;\n  formBuilder;\n  departments = [];\n  municipalities = [];\n  communities = [];\n  question = [];\n  dateMonitory = \"\";\n  dataGroup = [];\n  loadingQuestions = true;\n  formPoll;\n  communityId = 0;\n  municipalityId = 0;\n  departmentId = 0;\n  constructor(deparmentService, municipalitiesService, communitiesService, questionsService, formBuilder) {\n    this.deparmentService = deparmentService;\n    this.municipalitiesService = municipalitiesService;\n    this.communitiesService = communitiesService;\n    this.questionsService = questionsService;\n    this.formBuilder = formBuilder;\n  }\n  ngOnInit() {\n    //this.inicialiceTable();\n    this.dataGroup = dataExample;\n    this.getDeparments();\n    this.getQuestions();\n  }\n  /*\r\n      inicialiceTable() {\r\n          //  Activate the tooltips\r\n          $('[rel=\"tooltip\"]').tooltip();\r\n  \r\n          //  Init Bootstrap Select Picker\r\n          if ($(\".selectpicker\").length != 0) {\r\n              $(\".selectpicker\").selectpicker({\r\n                  iconBase: \"fa\",\r\n                  tickIcon: \"fa-check\"\r\n              });\r\n          }\r\n  \r\n          $('.datetimepicker').datetimepicker({\r\n              icons: {\r\n                  time: \"fa fa-clock-o\",\r\n                  date: \"fa fa-calendar\",\r\n                  up: \"fa fa-chevron-up\",\r\n                  down: \"fa fa-chevron-down\",\r\n                  previous: 'fa fa-chevron-left',\r\n                  next: 'fa fa-chevron-right',\r\n                  today: 'fa fa-screenshot',\r\n                  clear: 'fa fa-trash',\r\n                  close: 'fa fa-remove'\r\n              }\r\n          });\r\n  \r\n          $('.datepicker').datetimepicker({\r\n              format: 'MM/DD/YYYY',    //use this format if you want the 12hours timpiecker with AM/PM toggle\r\n              icons: {\r\n                  time: \"fa fa-clock-o\",\r\n                  date: \"fa fa-calendar\",\r\n                  up: \"fa fa-chevron-up\",\r\n                  down: \"fa fa-chevron-down\",\r\n                  previous: 'fa fa-chevron-left',\r\n                  next: 'fa fa-chevron-right',\r\n                  today: 'fa fa-screenshot',\r\n                  clear: 'fa fa-trash',\r\n                  close: 'fa fa-remove'\r\n              }\r\n          });\r\n  \r\n          $('.timepicker').datetimepicker({\r\n              //          format: 'H:mm',    // use this format if you want the 24hours timepicker\r\n              format: 'h:mm A',    //use this format if you want the 12hours timpiecker with AM/PM toggle\r\n              icons: {\r\n                  time: \"fa fa-clock-o\",\r\n                  date: \"fa fa-calendar\",\r\n                  up: \"fa fa-chevron-up\",\r\n                  down: \"fa fa-chevron-down\",\r\n                  previous: 'fa fa-chevron-left',\r\n                  next: 'fa fa-chevron-right',\r\n                  today: 'fa fa-screenshot',\r\n                  clear: 'fa fa-trash',\r\n                  close: 'fa fa-remove'\r\n              }\r\n  \r\n          });\r\n      }\r\n  */\n  getDeparments() {\n    this.deparmentService.getAll().subscribe(res => {\n      //console.log(res);\n      this.departments = res.data;\n    });\n  }\n  getMunicipalitiesByDeparment(event) {\n    let departmentId = event.target.value;\n    this.communities = [];\n    this.municipalities = [];\n    this.departmentId = Number(departmentId);\n    this.municipalitiesService.getByDepartmentId(departmentId).subscribe(res => {\n      this.municipalities = res.data;\n    });\n  }\n  getMunicipalities(event) {\n    let municipalityId = event.target.value;\n    this.municipalityId = Number(municipalityId);\n    this.communitiesService.getByCommunityByMunicipalityId(municipalityId).subscribe(res => {\n      this.communities = res.data;\n    });\n  }\n  getQuestions() {\n    this.questionsService.getAll().subscribe(res => {\n      this.question = res.data;\n      let data = [];\n      let group = {};\n      res.data.forEach(item => {\n        data.push({\n          questionId: item.id,\n          descripcion: item.description,\n          otherResponse: \"\",\n          recommendation: item.recommendation,\n          key: \"questions?\" + item.id,\n          key2: \"recommendations?\" + item.id\n        });\n      });\n      this.dataGroup = data;\n      data.forEach(question => {\n        group[question.key] = new FormControl(false, Validators.required);\n        if (question?.key2) {\n          group[question.key2] = new FormControl(\"\");\n        }\n      });\n      this.formPoll = this.formBuilder.group(group);\n      this.loadingQuestions = false;\n    });\n  }\n  save() {\n    //console.log({ municipalityId: this.municipalityId, departmentId: this.departmentId, communityId: Number(this.communityId) });\n    let req = [];\n    this.dataGroup.forEach(element => {\n      let questionId = Number(element.key.split('?')[1]);\n      req.push({\n        description: this.formPoll.get(element.key2).value,\n        response: this.formPoll.get(element.key).value,\n        QuestionId: questionId,\n        CommunityId: Number(this.communityId)\n      });\n    });\n    console.log(req);\n    console.log(this.formPoll.value);\n    //successAlert('Exitoso', 'Registro guardado con exito')\n  }\n\n  inicializeProperteForm() {\n    let data = [];\n    this.question.forEach(item => {\n      data.push({\n        questionId: item.id,\n        descripcion: item.description,\n        otherResponse: \"\",\n        recommendation: item.recommendation,\n        key: \"questions?\" + item.id,\n        key2: \"recommendations?\" + item.id\n      });\n    });\n    this.dataGroup = [...data];\n  }\n  toFormGroup() {\n    const group = {};\n    this.dataGroup.forEach(question => {\n      group[question.key] = new FormControl(false, Validators.required);\n      if (question?.key2) {\n        group[question.key2] = new FormControl(\"\", Validators.required);\n      }\n    });\n    this.formPoll = this.formBuilder.group(group);\n  }\n};\nMonitoringComponent = __decorate([Component({\n  selector: 'app-monitoring',\n  templateUrl: './monitoring.component.html',\n  styleUrls: ['./monitoring.component.css']\n}), __metadata(\"design:paramtypes\", [DepartmentService, MunicipalitiesService, CommunitiesService, QuestionService, FormBuilder])], MonitoringComponent);\nexport { MonitoringComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}