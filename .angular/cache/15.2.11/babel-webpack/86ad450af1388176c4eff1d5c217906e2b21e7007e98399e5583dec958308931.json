{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, of, tap, throwError } from 'rxjs';\nimport { environment } from 'environments/environment';\nimport { AuthStatus } from 'app/interfaces/AuthStattusEnum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    baseUrl = environment.baseUrl;\n    _currentUser = null;\n    _authStatus = AuthStatus.checking;\n    constructor(http) {\n      this.http = http;\n    }\n    login(email, password) {\n      const url = `${this.baseUrl}/auth/login`;\n      const body = {\n        email,\n        password\n      };\n      return this.http.post(url, body).pipe(tap(({\n        user,\n        token\n      }) => {\n        this._currentUser = user;\n        this._authStatus = AuthStatus.authenticate;\n        localStorage.setItem('token', token);\n        console.log({\n          user,\n          token\n        });\n        console.log(this._authStatus);\n      }), map(() => true),\n      // error\n      catchError(err => throwError(() => err.error.message)));\n    }\n    checkAuthStatus() {\n      const url = `${this.baseUrl}/auth/check-token`;\n      const token = localStorage.getItem('token');\n      if (!token) {\n        this.logout();\n        return of(false);\n      }\n      const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\n      return this.http.get(url, {\n        headers\n      }).pipe(map(({\n        token,\n        user\n      }) => {\n        this._currentUser = user;\n        this._authStatus = AuthStatus.authenticate;\n        localStorage.setItem('token', token);\n        localStorage.setItem('AuthStatus', AuthStatus.authenticate);\n        return true;\n      }),\n      //error\n      catchError(() => {\n        this._authStatus = AuthStatus.notAuthenticate;\n        return of(false);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      this._authStatus = AuthStatus.notAuthenticate;\n    }\n    getCheckStatus() {\n      // Verificar si el usuario está autenticado\n      this._authStatus = localStorage.getItem('AuthStatus');\n      return this._authStatus;\n    }\n    static ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}